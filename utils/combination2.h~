// Recursive template function
// http://www.codeproject.com/Articles/4675/Combinations-in-C

/*
template <class RanIt, class Func>
void recursive_combination( RanIt nbegin, RanIt nend, int n_column, RanIt rbegin, RanIt rend, int r_column, int loop, Func func) {
	int r_size=rend-rbegin;
	int localloop=loop;
	int local_n_column=n_column;

	//A different combination is out
	if(r_column > (r_size-1)) {
		func(rbegin,rend);
		return;
	}
	//===========================

	for(int i=0; i<=loop; i++){
		RanIt it1=rbegin;
		for(int cnt=0; cnt < r_column; cnt++){
			it1++;
		} 
		RanIt it2=nbegin;
		for(int cnt2=0; cnt2 < n_column+i; cnt2++){
			it2++;
		} 

		*it1=*it2;

		local_n_column++;

		recursive_combination(nbegin,nend,local_n_column,
		rbegin,rend,r_column+1,localloop,func);

		localloop--;
	}
}
*/

int n,k,*a,count;
printf("Enter the value of n and k\n");
scanf("%d %d",&n,&k);
a=(int*)malloc(k*sizeof(int));
count=nCk(n,k,0,a,k);

int nCk(int n,int loopno,int ini,int *a,int k){
	static int count=0;
	int i;
	loopno--;
	if(loopno<0) {
		a[k-1]=ini;
		for(i=0;i<k;i++) {
		    printf("%d,",a[i]);
		}
		printf("\n");
		count++;
		return 0;
	}
	for(i=ini;i<=n-loopno-1;i++) {
		a[k-1-loopno]=i+1;
		nCk(n,loopno,i+1,a,k);
	}
	if(ini==0)
	return count;
	else return 0;
}


typedef vector<int>::iterator vii;

void display(vii begin,vii end)
{
  for (vii it=begin;it!=end;++it)
      cout<<*it<<" ";
  cout<<endl;
}

//recursive_combination(ca.begin(),ca.end(),0,cb.begin(),cb.end(),0,8-3,display);
void rc2( vector<int> nset, vector<int> rset) {
	vector<int>::iterator nbegin = nset.begin(); vector<int>::iterator nend = nset.end(); int n_column=0;
	vector<int>::iterator rbegin = rset.begin(); vector<int>::iterator rend = rset.end(); int r_column=0;
	int loop = nset.size()-rset.size();
	int r_size=rend-rbegin;
	int localloop=loop;
	int local_n_column=0;

	for(int i=0; i<=loop; i++){
		for(int cnt=0; cnt < r_column; cnt++){
			rbegin++;
		} 
		for(int cnt2=0; cnt2 < n_column+i; cnt2++){
			nbegin++;
		} 

		*rbegin=*nbegin;
		local_n_column++;
		rc2(nset,rset);
		localloop--;
	}
}

//void rc( vector<int> nset, vector<int> rset){

	
